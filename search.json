[{"title":"Embarking on a New Journey","path":"/2023-0728-Embarking on a New Journey/","content":"Hello, everyone. I apologize for the blog being offline for nearly a month. Recently, the server that my friends and I rented expired, and at that time, I was focused on studying for a language proficiency exam, so I didn’t pay much attention to it. As a result, I lost the most recent few articles. However, I don’t plan to retrieve them now. I am starting anew, and from now on, I will primarily use English for publishing articles to practice my academic writing skills in English."},{"title":"基于esp8266的小爱同学和app控制的小台灯","path":"/2022-0114-基于esp8266的声控和app控制的小台灯/","content":"流程图 esp8266 代码使用 arduino ide 烧录esp8266代码，如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// 引入 wifi 模块#include &lt;ESP8266WiFi.h&gt;static WiFiClient espClient;// 引入阿里云 IoT SDK#include &lt;AliyunIoTSDK.h&gt;// 设置产品和设备的信息，从阿里云设备信息里查看#define PRODUCT_KEY &quot;&quot;#define DEVICE_NAME &quot;&quot;#define DEVICE_SECRET &quot;&quot;#define REGION_ID &quot;cn-shanghai&quot;// 设置 wifi 信息#define WIFI_SSID &quot;&quot;#define WIFI_PASSWD &quot;&quot;// 初始化 wifi 连接void wifiInit(const char *ssid, const char *passphrase)&#123; WiFi.mode(WIFI_STA); WiFi.begin(ssid, passphrase); while (WiFi.status() != WL_CONNECTED) &#123; delay(1000); Serial.println(&quot;WiFi not Connect&quot;); &#125; Serial.println(&quot;Connected to AP&quot;);&#125;// 属性修改的回调函数void brightnessCallback(JsonVariant p)&#123; int brightness = p[&quot;table_lamp:brightness&quot;]; // 改变亮度 if (brightness == 1) &#123; switch_brightness(); &#125; &#125;// 属性修改的回调函数void lightingtoneCallback(JsonVariant p)&#123; int lightingtone = p[&quot;table_lamp:lightingtone&quot;]; // 改变色调 if (lightingtone == 1) &#123; switch_lightingtone(); &#125; &#125;void setup() &#123; Serial.begin(9600); // 初始化 wifi wifiInit(WIFI_SSID, WIFI_PASSWD); // 初始化 iot，需传入 wifi 的 client，和设备产品信息 AliyunIoTSDK::begin(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID); // 绑定一个设备属性回调，当远程修改此属性，会触发 powerCallback AliyunIoTSDK::bindData(&quot;table_lamp:brightness&quot;, brightnessCallback); // 绑定一个设备属性回调，当远程修改此属性，会触发 powerCallback AliyunIoTSDK::bindData(&quot;table_lamp:lightingtone&quot;, lightingtoneCallback);&#125;void loop() &#123; AliyunIoTSDK::loop();&#125;//改变亮度void switch_brightness()&#123; pinMode(LED_BUILTIN, HIGH); pinMode(16, HIGH); delay(100); pinMode(16, LOW); pinMode(LED_BUILTIN, LOW);&#125;//改变灯光色调void switch_lightingtone()&#123; pinMode(LED_BUILTIN, HIGH); pinMode(16, HIGH); delay(1200); pinMode(16, LOW); pinMode(LED_BUILTIN, LOW);&#125; 阿里云IOT平台 完成实例、产品、设备注册。 配置物模型数据，相当于制作一个抽象的、数字化的台灯。通过这个物模型，控制实际设备。 模型TSL如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144&#123; &quot;schema&quot;: &quot;https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json&quot;, &quot;profile&quot;: &#123; &quot;version&quot;: &quot;1.0&quot;, &quot;productKey&quot;: &quot;gs6cY8aZKGQ&quot; &#125;, &quot;properties&quot;: [ &#123; &quot;identifier&quot;: &quot;brightness&quot;, &quot;name&quot;: &quot;亮度&quot;, &quot;accessMode&quot;: &quot;rw&quot;, &quot;desc&quot;: &quot;1为调节亮度&quot;, &quot;required&quot;: false, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125;, &#123; &quot;identifier&quot;: &quot;lightingtone&quot;, &quot;name&quot;: &quot;色调&quot;, &quot;accessMode&quot;: &quot;rw&quot;, &quot;desc&quot;: &quot;1为调节色调&quot;, &quot;required&quot;: false, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125; ], &quot;events&quot;: [ &#123; &quot;identifier&quot;: &quot;post&quot;, &quot;name&quot;: &quot;post&quot;, &quot;type&quot;: &quot;info&quot;, &quot;required&quot;: true, &quot;desc&quot;: &quot;属性上报&quot;, &quot;method&quot;: &quot;thing.event.property.post&quot;, &quot;outputData&quot;: [ &#123; &quot;identifier&quot;: &quot;brightness&quot;, &quot;name&quot;: &quot;亮度&quot;, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125;, &#123; &quot;identifier&quot;: &quot;lightingtone&quot;, &quot;name&quot;: &quot;色调&quot;, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125; ] &#125; ], &quot;services&quot;: [ &#123; &quot;identifier&quot;: &quot;set&quot;, &quot;name&quot;: &quot;set&quot;, &quot;required&quot;: true, &quot;callType&quot;: &quot;async&quot;, &quot;desc&quot;: &quot;属性设置&quot;, &quot;method&quot;: &quot;thing.service.property.set&quot;, &quot;inputData&quot;: [ &#123; &quot;identifier&quot;: &quot;brightness&quot;, &quot;name&quot;: &quot;亮度&quot;, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125;, &#123; &quot;identifier&quot;: &quot;lightingtone&quot;, &quot;name&quot;: &quot;色调&quot;, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125; ], &quot;outputData&quot;: [] &#125;, &#123; &quot;identifier&quot;: &quot;get&quot;, &quot;name&quot;: &quot;get&quot;, &quot;required&quot;: true, &quot;callType&quot;: &quot;async&quot;, &quot;desc&quot;: &quot;属性获取&quot;, &quot;method&quot;: &quot;thing.service.property.get&quot;, &quot;inputData&quot;: [ &quot;brightness&quot;, &quot;lightingtone&quot; ], &quot;outputData&quot;: [ &#123; &quot;identifier&quot;: &quot;brightness&quot;, &quot;name&quot;: &quot;亮度&quot;, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125;, &#123; &quot;identifier&quot;: &quot;lightingtone&quot;, &quot;name&quot;: &quot;色调&quot;, &quot;dataType&quot;: &#123; &quot;type&quot;: &quot;bool&quot;, &quot;specs&quot;: &#123; &quot;0&quot;: &quot;关&quot;, &quot;1&quot;: &quot;开&quot; &#125; &#125; &#125; ] &#125; ], &quot;functionBlockId&quot;: &quot;table_lamp&quot;, &quot;functionBlockName&quot;: &quot;台灯模块&quot;&#125; 阿里云云函数通过 Serverless 可以无服务器部署后端，方便快捷，关键还免费（小额使用）。 云函数代码如下。 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#x27;use strict&#x27;;exports.main = async (event, context) =&gt; &#123;\t//event为客户端上传的参数\tconsole.log(&#x27;event : &#x27;, event)\tconst Core = require(&#x27;@alicloud/pop-core&#x27;);\tvar client = new Core(&#123; accessKeyId: &#x27;&#x27;, accessKeySecret: &#x27;&#x27;, // securityToken: &#x27;&lt;your-sts-token&gt;&#x27;, // use STS Token endpoint: &#x27;https://iot.cn-shanghai.aliyuncs.com&#x27;, apiVersion: &#x27;2018-01-20&#x27;\t&#125;);\tlet b = 0;\tlet l = 0;\tif(event[&quot;isBrightness&quot;] == 1)&#123; b = 1; l = 0;\t&#125;else&#123; b = 0; l = 1;\t&#125; var params = &#123; &quot;IotInstanceId&quot;: &quot;iot-06z00g6fsqfbsgl&quot;, &quot;ProductKey&quot;: &quot;gs6cY8aZKGQ&quot;, &quot;DeviceName&quot;: &quot;light001&quot;, &quot;Items&quot;: &quot;&#123;\\&quot;table_lamp:brightness\\&quot;:&quot;+b+&quot;,\\&quot;table_lamp:lightingtone\\&quot;:&quot;+l+&quot;&#125;&quot;\t&#125;\tvar requestOption = &#123; method: &#x27;POST&#x27;\t&#125;;\tlet res = client.request(&#x27;SetDeviceProperty&#x27;, params, requestOption).then((result) =&gt; &#123; // console.log(JSON.stringify(result)); return result;\t&#125;, (ex) =&gt; &#123; // console.log(ex); return ex;\t&#125;)\treturn res;&#125;; 我的台灯APPAPP基于vue,使用uni-app生成。 图示如下。 关键代码如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100&lt;template&gt;\t&lt;view class=&quot;bg&quot;&gt; &lt;view class=&quot;container&quot;&gt; &lt;view class=&quot;tittle&quot;&gt;我的台灯▾&lt;/view&gt; &lt;view class=&quot;card-left&quot;&gt; &lt;uni-card title=&quot;灯光亮度&quot; is-shadow=true&gt; &lt;button class=&quot;icon-button&quot; v-on:click=&quot;switchBrightness()&quot;&gt; &lt;uni-icons type=&quot;loop&quot; size=&quot;30&quot;&gt;&lt;/uni-icons&gt; &lt;/button&gt; &lt;/uni-card&gt; &lt;/view&gt; &lt;view class=&quot;card-right&quot;&gt; &lt;uni-card title=&quot;灯光强度&quot; is-shadow=true&gt; &lt;button class=&quot;icon-button&quot; v-on:click=&quot;switchLightingtone()&quot;&gt; &lt;uni-icons type=&quot;loop&quot; size=&quot;30&quot;&gt;&lt;/uni-icons&gt; &lt;/button&gt; &lt;/uni-card&gt; &lt;/view&gt; &lt;/view&gt;\t&lt;/view&gt;&lt;/template&gt;&lt;script&gt;\texport default &#123; onLoad: function() &#123; console.log(&#x27;index page load&#x27;); // this.switch(); &#125;, data() &#123; return &#123; isB: 1 &#125; &#125;, methods: &#123; switch: function() &#123; // callback方式 uniCloud.callFunction(&#123; name: &#x27;switch&#x27;, data: &#123; &quot;isBrightness&quot;: this.isB &#125;, success(res) &#123; let isSuccess = res.success; console.log(res); &#125;, fail(err) &#123; console.log(err); &#125;, &#125;); &#125;, switchBrightness:function()&#123; this.isB = 1; this.switch(); &#125;, switchLightingtone:function()&#123; this.isB = 0; this.switch(); &#125; &#125;\t&#125;&lt;/script&gt;&lt;style&gt;\t.bg &#123; background: url(../../static/bg.jpg); background-size: cover; opacity: 1; z-index: -1; width: 100%; height: 100%; position: fixed;\t&#125;\t.container &#123; padding: 0 10px;\t&#125;\t.tittle &#123; font-size: 22px; padding-left: 15px; padding-bottom: 20px;\t&#125;\t.card-left &#123; width: 45%; float: left;\t&#125;\t.card-right &#123; width: 45%; float: right;\t&#125;\t.icon-button &#123; margin: 0; text-align: center;\t&#125;&lt;/style&gt; 转发订阅消息脚本因为我的手机是Redmi k30 pro, 所以想要接入小爱同学，但是小米的IOT开发者只支持企业入驻。所以只能借助巴法云物联网平台，然后使用脚本做消息转发来接入小爱同学。 脚本使用python编写，共有两个线程，子线程用来维持心跳。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697import socketimport threadingimport sysimport timefrom urllib import parsefrom alibabacloud_iot20180120.client import Client as Iot20180120Clientfrom alibabacloud_tea_openapi import models as open_api_modelsfrom alibabacloud_iot20180120 import models as iot_20180120_models# 心跳class Heartbeat(threading.Thread): def __init__(self, s): super().__init__() self.s = s def run(self): while True: time.sleep(30) self.s.send(&quot;ping\\r &quot;.encode())def run(): address = (&#x27;bemfa.com&#x27;, 8344) # 服务端地址和端口 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect(address) # 尝试连接服务端 except Exception: print(&#x27;[!] Server not found ot not open&#x27;) sys.exit() s.send(&quot;cmd=1&amp;uid=721a5***********************&amp;topic=light002\\r &quot;.encode()) data = s.recv(1024) data = data.decode() print(&#x27;[Recieved]&#x27;, data) # 启动心跳子线程 heartbeat = Heartbeat(s) heartbeat.start() while True: data = s.recv(1024) data = data.decode() data = data.replace(&quot;\\r &quot;, &quot;&quot;) data_dict = parse.parse_qs(data) # print(&#x27;[Recieved]&#x27;, data_dict) try: msg = data_dict[&quot;msg&quot;] if msg[0] == &quot;on&quot;: AliyunIOT.main(1, 0) if msg[0] == &quot;off&quot;: AliyunIOT.main(1, 0) except Exception: pass # data # s.close()class AliyunIOT: def __init__(self): pass @staticmethod def create_client(): &quot;&quot;&quot; 使用AK&amp;SK初始化账号Client @param access_key_id: @param access_key_secret: @return: Client @throws Exception &quot;&quot;&quot; config = open_api_models.Config( # 您的AccessKey ID, access_key_id=&quot;&quot;, # 您的AccessKey Secret, access_key_secret=&quot;&quot; ) # 访问的域名 config.endpoint = f&#x27;iot.cn-shanghai.aliyuncs.com&#x27; return Iot20180120Client(config) @staticmethod def main(b, l): client = AliyunIOT.create_client() set_device_property_request = iot_20180120_models.SetDevicePropertyRequest( product_key=&#x27;&#x27;, device_name=&#x27;&#x27;, iot_instance_id=&#x27;iot-06z00g6fsqfbsgl&#x27;, items=&quot;&#123;\\&quot;table_lamp:brightness\\&quot;:&quot; + str(b) + &quot;,\\&quot;table_lamp:lightingtone\\&quot;:&quot; + str(l) + &quot;&#125;&quot; ) res = client.set_device_property(set_device_property_request) # print(res)if __name__ == &#x27;__main__&#x27;: run() 巴法云物联网平台 新建TCP创客云主题，如下。 命名要求： 当主题名字后三位是001时为插座设备。当主题名字后三位是002时为灯泡设备。当主题名字后三位是003时为风扇设备。当主题名字后三位是004时为传感器设备。当主题名字后三位是005时为空调设备。当主题名字后三位是006时为开关设备。当主题名字后三位是009时为窗帘设备。 小爱同学绑定巴法云绑定步骤。 打开米家–&gt;我的–&gt;其他平台设备–&gt;巴法云–&gt;绑定账户。 演示视频"},{"title":"基于pytorch的Mnist手写体识别","path":"/2021-0504-基于pytorch的Mnist手写体识别/","content":"构建自己的数据读写类自定义的数据读写类要基于Dataset类构建，并实现其中的三个方法。Dataset类位于torch.utils.data 123def __init__() # 用来初始化def __getitem__() #用来获取初始化后的每一个数据，接收值是一个索引，应该返回（data,label)def __len__() # 获取数据集的大小 构建完成后可以使用类似于数组的方式访问，如MyDataset[0] 代码如下： 12345678910111213141516171819202122232425262728293031323334353637class MnistDataSet(Dataset): def __init__(self, file_path, is_train=True): # 使用scipy读入mat文件数据 mnist_all = sio.loadmat(file_path) train_raw = [] test_raw = [] # 依次读入数据集0-9 for i in range(10): train_temp = mnist_all[&quot;train&quot; + str(i)] for j in train_temp: j = np.array(j) / 225.0 train_raw.append([j, i]) for i in range(10): test_temp = mnist_all[&quot;test&quot; + str(i)] for j in test_temp: j = np.array(j) / 225.0 test_raw.append([j, i]) self.trainDataSet = train_raw self.testDataSet = test_raw self.is_train = is_train def __getitem__(self, index): if self.is_train: dataSet = self.trainDataSet else: dataSet = self.testDataSet img = dataSet[index][0] labelArr = np.eye(10) label = labelArr[dataSet[index][1]] return img, label def __len__(self): if self.is_train: return len(self.trainDataSet) else: return len(self.testDataSet) 接下来使用迭代器加载数据集，如下。 DataLoader位于torch.utils.data.dataloader 123# 读取数据trainSet = MnistDataSet(file_path=&quot;./data/mnist_all.mat&quot;, is_train=True)trainDataLoader = DataLoader(trainSet, batch_size=batch_size, shuffle=True) 构建网络网络结构为（卷积层+池化层+激活层）X2+（全连接层+激活层）X3 损失函数为交叉熵损失函数。 代码如下： 1234567891011121314151617181920212223242526272829class CnnNet(nn.Module): def __init__(self): super().__init__() self.conv1 = nn.Conv2d(1, 32, (3, 3), (1, 1)) self.conv2 = nn.Conv2d(32, 64, (3, 3), (1, 1)) self.mp = nn.MaxPool2d(kernel_size=(2, 2), stride=2) self.fc1 = nn.Linear(1600, 1024) self.fc2 = nn.Linear(1024, 1024) self.fc3 = nn.Linear(1024, 128) self.fc4 = nn.Linear(128, 10) self.relu = nn.ReLU() self.softmax = nn.Softmax(dim=1) def forward(self, x): x = x.reshape(-1, 1, 28, 28) y = self.conv1(x) y = self.relu(y) y = self.mp(y) y = self.conv2(y) y = self.relu(y) y = self.mp(y) y = y.reshape(-1, 1600) y = self.relu(self.fc1(y)) y = self.relu(self.fc2(y)) y = self.relu(self.fc3(y)) y = self.fc4(y) y = self.softmax(y) return y 训练过程12345678910111213141516171819202122232425262728293031323334353637def train(epoch, device, batch_size, lr, save_path): model = CnnNet() model.train() # 读取数据 trainSet = MnistDataSet(file_path=&quot;./data/mnist_all.mat&quot;, is_train=True) trainDataLoader = DataLoader(trainSet, batch_size=batch_size, shuffle=True) # 定义交叉熵损失 loss_func = torch.nn.CrossEntropyLoss() # 定义Adam优化器 optimizer = optim.Adam(model.parameters(), lr=lr) for e in range(epoch): for i, (data, target) in enumerate(trainDataLoader): data, target = data.to(device).float(), target.to(device) out = model(data) p = torch.argmax(out, dim=1) y = torch.argmax(target, dim=1) loss = loss_func(out, y) # 梯度清零 optimizer.zero_grad() loss.backward() # 更新参数 optimizer.step() if i % 100 == 0: # 准确率计算 train_correct = (p == y).sum() / batch_size print(&quot;Epoch为&quot; + str(e)) print(&quot;第&quot; + str(e * len(trainDataLoader) + i) + &quot;次训练损失为&quot; + str(loss)) print(&quot;第&quot; + str(e * len(trainDataLoader) + i) + &quot;正确率为&quot; + str(train_correct)) # 模型保存 torch.save(model, save_path) 验证过程12345678910111213def dev(device, batch_size, model_path): model = torch.load(model_path) trainSet = MnistDataSet(file_path=&quot;./data/mnist_all.mat&quot;, is_train=False) trainDataLoader = DataLoader(trainSet, batch_size=batch_size, shuffle=False) train_correct = 0 for i, (data, target) in enumerate(trainDataLoader): data, target = data.to(device).float(), target.to(device) out = model(data) p = torch.argmax(out, dim=1) y = torch.argmax(target, dim=1) train_correct += (p == y).sum() print(&quot;验证集正确率为&quot; + str(train_correct / (len(trainDataLoader) * batch_size))) 运行1234567if __name__ == &#x27;__main__&#x27;: epoch = 15 batch_size = 128 lr = 0.001 device = torch.device(&quot;cpu&quot;) train(epoch, device, batch_size, lr, save_path=&quot;model2.pkl&quot;) dev(&quot;cpu&quot;, 1024, &quot;model2.pkl&quot;) 结果： 验证集正确率为：0.9612 TensorBoard 可视化1234writer = SummaryWriter(&#x27;./log&#x27;) # 用于指定log保存位置，后续可视化的数据来源writer.add_scalar(&quot;Loss&quot;, loss, e * len(trainDataLoader) + i) # 绘制曲线图 add_scalar的参数如下： tag (string)：数据标识符 scalar_value (float or string&#x2F;blobname)：要保存的数值 global_step (int)：全局步值 walltime (float)：可选参数，用于记录发生的时间，默认为 time.time() 启动可视化网页： –logdir 保存的文件夹位置 –port 端口号 1tensorboard --logdir ./log --port 9000 所有代码这次不传Github了，所有的代码都在这里。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147import torchimport numpy as npimport scipy.io as sioimport torch.nn as nnfrom torch import optimfrom torch.utils.data import Datasetfrom torch.utils.data.dataloader import DataLoaderfrom torch.utils.tensorboard import SummaryWriterclass MnistDataSet(Dataset): def __init__(self, file_path, is_train=True): # 使用scipy读入mat文件数据 mnist_all = sio.loadmat(file_path) train_raw = [] test_raw = [] # 依次读入数据集0-9 for i in range(10): train_temp = mnist_all[&quot;train&quot; + str(i)] for j in train_temp: j = np.array(j) / 225.0 train_raw.append([j, i]) for i in range(10): test_temp = mnist_all[&quot;test&quot; + str(i)] for j in test_temp: j = np.array(j) / 225.0 test_raw.append([j, i]) self.trainDataSet = train_raw self.testDataSet = test_raw self.is_train = is_train def __getitem__(self, index): if self.is_train: dataSet = self.trainDataSet else: dataSet = self.testDataSet img = dataSet[index][0] labelArr = np.eye(10) label = labelArr[dataSet[index][1]] return img, label def __len__(self): if self.is_train: return len(self.trainDataSet) else: return len(self.testDataSet)class CnnNet(nn.Module): def __init__(self): super().__init__() self.conv1 = nn.Conv2d(1, 32, (3, 3), (1, 1)) self.conv2 = nn.Conv2d(32, 64, (3, 3), (1, 1)) self.mp = nn.MaxPool2d(kernel_size=(2, 2), stride=2) self.fc1 = nn.Linear(1600, 1024) self.fc2 = nn.Linear(1024, 1024) self.fc3 = nn.Linear(1024, 128) self.fc4 = nn.Linear(128, 10) self.relu = nn.ReLU() self.softmax = nn.Softmax(dim=1) def forward(self, x): x = x.reshape(-1, 1, 28, 28) y = self.conv1(x) y = self.relu(y) y = self.mp(y) y = self.conv2(y) y = self.relu(y) y = self.mp(y) y = y.reshape(-1, 1600) y = self.relu(self.fc1(y)) y = self.relu(self.fc2(y)) y = self.relu(self.fc3(y)) y = self.fc4(y) y = self.softmax(y) return ydef train(epoch, device, batch_size, lr, save_path): model = CnnNet() model.train() # 读取数据 trainSet = MnistDataSet(file_path=&quot;./data/mnist_all.mat&quot;, is_train=True) trainDataLoader = DataLoader(trainSet, batch_size=batch_size, shuffle=True) writer = SummaryWriter(&#x27;./log&#x27;) # 定义交叉熵损失 loss_func = torch.nn.CrossEntropyLoss() # 定义Adam优化器 optimizer = optim.Adam(model.parameters(), lr=lr) for e in range(epoch): for i, (data, target) in enumerate(trainDataLoader): data, target = data.to(device).float(), target.to(device) out = model(data) p = torch.argmax(out, dim=1) y = torch.argmax(target, dim=1) loss = loss_func(out, y) # 梯度清零 optimizer.zero_grad() loss.backward() # 更新参数 optimizer.step() if i % 100 == 0: # 准确率计算 train_correct = (p == y).sum() / batch_size print(&quot;Epoch为&quot; + str(e)) print(&quot;第&quot; + str(e * len(trainDataLoader) + i) + &quot;次训练损失为&quot; + str(loss)) writer.add_scalar(&quot;Loss&quot;, loss, e * len(trainDataLoader) + i) print(&quot;第&quot; + str(e * len(trainDataLoader) + i) + &quot;正确率为&quot; + str(train_correct)) writer.add_scalar(&quot;Acc&quot;, train_correct, e * len(trainDataLoader) + i) # 模型保存 torch.save(model, save_path)def dev(device, batch_size, model_path): model = torch.load(model_path) trainSet = MnistDataSet(file_path=&quot;./data/mnist_all.mat&quot;, is_train=False) trainDataLoader = DataLoader(trainSet, batch_size=batch_size, shuffle=False) train_correct = 0 for i, (data, target) in enumerate(trainDataLoader): data, target = data.to(device).float(), target.to(device) out = model(data) p = torch.argmax(out, dim=1) y = torch.argmax(target, dim=1) train_correct += (p == y).sum() print(&quot;验证集正确率为&quot; + str(train_correct / (len(trainDataLoader) * batch_size)))if __name__ == &#x27;__main__&#x27;: epoch = 15 batch_size = 128 lr = 0.001 device = torch.device(&quot;cpu&quot;) train(epoch, device, batch_size, lr, save_path=&quot;model2.pkl&quot;) dev(&quot;cpu&quot;, 1024, &quot;model2.pkl&quot;)"},{"title":"腾讯极客技术挑战赛第三期码上种树Writeup","path":"/2021-0320-腾讯极客技术挑战赛第三期码上种树Writeup/","content":"前言第一次参加网安相关的竞赛，种了一百万课数（因为要上课，只做了一天半）。看大佬们都在写Writeup（查了下意思是 ctf（信息安全夺旗赛）中的解题思路），我也来搞一篇，记录一下我的解题思路和学到&lt;的东西（好多东西是第一次见）。 题目第一题第一题是直接把第一个请求返回的参数在发送出去。 123456789101112131415161718def main(): url = &quot;http://159.75.70.9:8081/pull?u=000003315146DEE5E425871CDE778FF5&quot; postData = &quot;u=000003315146DEE5E425871CDE778FF5&quot; try: r = requests.post(url, data=postData) t = json.loads(r.text)[&quot;t&quot;] a = json.loads(r.text)[&quot;a&quot;] c = json.loads(r.text)[&quot;c&quot;] url1 = &quot;http://159.75.70.9:8081/push?t=&quot; + t + &quot;&amp;a=&quot; + a r1 = requests.get(url1, timeout=0.5) print(r1.text) except Exception as e: print(e) if __name__ == &quot;__main__&quot;: while True: main() 第二题第二题题目JS文件: 1window.A3C2EA99=async function(&#123;a&#125;)&#123;return new Promise(_=&gt;setTimeout(__=&gt;_(a[0]*a[0]+a[0]),2000))&#125; 一个简单计算，只是加了一个定时器，这个题感觉直接在浏览器上修改就可以，但是我为了以后的题，统一使用的python。 12345678910111213141516171819def main(): url = &quot;http://159.75.70.9:8081/pull?u=000003315146DEE5E425871CDE778FF5&quot; postData = &quot;u=000003315146DEE5E425871CDE778FF5&quot; try: r = requests.post(url, data=postData) t = json.loads(r.text)[&quot;t&quot;] a = int(json.loads(r.text)[&quot;a&quot;]) c = json.loads(r.text)[&quot;c&quot;] a = str(a*a+a) url1 = &quot;http://159.75.70.9:8081/push?t=&quot; + t + &quot;&amp;a=&quot; + a r1 = requests.get(url1, timeout=0.5) print(r1.text) except Exception as e: print(e) if __name__ == &quot;__main__&quot;: while True: main() 第三题第三题JS文件 1eval(atob(&quot;dmFyIF8weGU5MzY9WydBNTQ3Mzc4OCddOyhmdW5jdGlvbihfMHg0OGU4NWMsXzB4ZTkzNmQ4KXt2YXIgXzB4MjNmYzVhPWZ1bmN0aW9uKF8weDI4NThkOSl7d2hpbGUoLS1fMHgyODU4ZDkpe18weDQ4ZTg1Y1sncHVzaCddKF8weDQ4ZTg1Y1snc2hpZnQnXSgpKTt9fTtfMHgyM2ZjNWEoKytfMHhlOTM2ZDgpO30oXzB4ZTkzNiwweDE5NikpO3ZhciBfMHgyM2ZjPWZ1bmN0aW9uKF8weDQ4ZTg1YyxfMHhlOTM2ZDgpe18weDQ4ZTg1Yz1fMHg0OGU4NWMtMHgwO3ZhciBfMHgyM2ZjNWE9XzB4ZTkzNltfMHg0OGU4NWNdO3JldHVybiBfMHgyM2ZjNWE7fTt3aW5kb3dbXzB4MjNmYygnMHgwJyldPWZ1bmN0aW9uKF8weDMzNTQzNyl7dmFyIF8weDFhYWMwMj0weDMwZDNmO2Zvcih2YXIgXzB4M2JlZDZhPTB4MzBkM2Y7XzB4M2JlZDZhPjB4MDtfMHgzYmVkNmEtLSl7dmFyIF8weDM3NTM0MD0weDA7Zm9yKHZhciBfMHgxZGRiNzc9MHgwO18weDFkZGI3NzxfMHgzYmVkNmE7XzB4MWRkYjc3Kyspe18weDM3NTM0MCs9XzB4MzM1NDM3WydhJ11bMHgwXTt9XzB4Mzc1MzQwJV8weDMzNTQzN1snYSddWzB4Ml09PV8weDMzNTQzN1snYSddWzB4MV0mJl8weDNiZWQ2YTxfMHgxYWFjMDImJihfMHgxYWFjMDI9XzB4M2JlZDZhKTt9cmV0dXJuIF8weDFhYWMwMjt9Ow==&quot;)) 搜了一下atob()，发现 atob() 方法用于解码使用 base-64 编码的字符串 。 Base64解码，格式化代码后： 123456789101112131415161718192021222324var _0xe936 = [&#x27;A5473788&#x27;]; (function(_0x48e85c, _0xe936d8) &#123; var _0x23fc5a = function(_0x2858d9) &#123; while (--_0x2858d9) &#123; _0x48e85c[&#x27;push&#x27;](_0x48e85c[&#x27;shift&#x27;]()); &#125; &#125;; _0x23fc5a(++_0xe936d8);&#125; (_0xe936, 0x196));var _0x23fc = function(_0x48e85c, _0xe936d8) &#123; _0x48e85c = _0x48e85c - 0x0; var _0x23fc5a = _0xe936[_0x48e85c]; return _0x23fc5a;&#125;;window[_0x23fc(&#x27;0x0&#x27;)] = function(_0x335437) &#123; var _0x1aac02 = 0x30d3f; for (var _0x3bed6a = 0x30d3f; _0x3bed6a &gt; 0x0; _0x3bed6a--) &#123; var _0x375340 = 0x0; for (var _0x1ddb77 = 0x0; _0x1ddb77 &lt; _0x3bed6a; _0x1ddb77++) &#123; _0x375340 += _0x335437[&#x27;a&#x27;][0x0]; &#125; _0x375340 % _0x335437[&#x27;a&#x27;][0x2] == _0x335437[&#x27;a&#x27;][0x1] &amp;&amp; _0x3bed6a &lt; _0x1aac02 &amp;&amp; (_0x1aac02 = _0x3bed6a); &#125; return _0x1aac02;&#125;; 最后通过变量替换得到解决代码： 123456789101112131415i1 = 199999value = 199999while i1 &gt; 0: temp_val = 0 i2 = 0 while i2 &lt; i1: temp_val = a[0] + temp_val i2 = i2 + 1 if i1 % 100 == 0: temp_val = i1 * a[0]\tif temp_val % a[2] == a[1]: if i1 &lt; 199999: value = i1\ti1 = i1 - 1a = value 第四题题目JS文件 1window.A593C8B8=async(_)=&gt;(($,_,__,___,____)=&gt;&#123;let _____=function*()&#123;while([])yield[(_,__)=&gt;_+__,(_,__)=&gt;_-__,(_,__)=&gt;_*__][++__%(!+[]+!+[]+!+[])][(+(+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+[]])+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][[]]+[])[!+[]+!+[]]](+[],___,____)&#125;();let ______=function(_____,______,_______)&#123;____=_____;___=______[([][[]]+&#x27;&#x27;)[+!+[]]+(!![]+&#x27;&#x27;)[+!+[]+!+[]+!+[]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]])[+!+[]]+(!![]+&#x27;&#x27;)[+[]]]()[(+(!+[]+!+[]+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]])+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([][[]]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]]();__==_[(![]+&#x27;&#x27;)[+!+[]]][(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(!![]+[])[+[]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])[+!+[]]]&amp;&amp;_______(-___)&#125;;return new Promise(__=&gt;_[(![]+&#x27;&#xgt;$[(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[+!+[]]])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]])()())[!+[]+!+[]+!+[]+[+[]]]+([![]]+[][[]])[+!+[]+[+[]]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+[]]+(!![]+[])[+[]]](____=&gt;______(___,_____,__),___)))&#125;)(window,_,+[],+[],+[]) 日，刚开始给我看蒙了。 然后把那些“!+[]”等放到浏览器中计算，然后进行变量替换得到： 123456789101112window.A593C8B8 = async (A) =&gt; (($, A, B, C, D) =&gt; &#123; let E = function* () &#123; while (1) yield[(A, B) =&gt; A + B, (A, B) =&gt; A - B, (A, B) =&gt; A * B][++B % 3][&quot;bind&quot;](0, C, D) &#125;(); let F = function (E, F, G) &#123; D = E; C = F[&quot;next&quot;]()[&quot;value&quot;](); B == A[&quot;a&quot;][&quot;length&quot;] &amp;&amp; G(-C) &#125;; let temp = new Promise(B =&gt; A[&quot;a&quot;][&quot;forEach&quot;](C =&gt; $[&quot;setTimeout&quot;](D =&gt; F(C, E, B), C))) return temp&#125;)(window, A, 0, 0, 0) 通过分析代码和观察数据得出这其实就是先把A中的数据排序，然后按照固定加减乘次序做一次运算。 这里浪费了我好长时间，看来以后得重视使用浏览器开发者工具调试。 解题代码关键部分： 12345temArr = afor i in range(6): temArr.append(a[i]) temArr.sort()tempVal = (temArr[0] * temArr[1] - temArr[2] + temArr[3]) * temArr[4] - temArr[5] + temArr[6] 第五题题目JS文件： 123456789window.A661E542 = async function (&#123; a: A &#125;) &#123; return (await WebAssembly.instantiate( await WebAssembly.compile(await ( await fetch(&quot;data:application/octet-binary;base64,AGFzbQEAAAABBwFgAn9/AX8CFwIETWF0aANtaW4AAARNYXRoA21heAAAAwIBAAcHAQNSdW4AAgpgAV4BBn8gACECIAFBAWsiBARAA0AgAiEDQQAhBkEKIQcDQCADQQpwIQUgA0EKbiEDIAUgBhABIQYgBSAHEAAhByADQQBLDQALIAIgBiAHbGohAiAEQQFrIgQNAAsLIAIL&quot;)).arrayBuffer()), &#123; Math: Math &#125;)).exports.Run(...A)&#125; Data部分解密之后得到： 12345678910111200 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F --------------------------------------------------------------------00 61 73 6D 01 00 00 00 01 07 01 60 02 7F 7F 01 | .asm.......`..7F 02 17 02 04 4D 61 74 68 03 6D 69 6E 00 00 04 | ....Math.min...4D 61 74 68 03 6D 61 78 00 00 03 02 01 00 07 07 | Math.max........01 03 52 75 6E 00 02 0A 60 01 5E 01 06 7F 20 00 | ..Run...`.^.. .21 02 20 01 41 01 6B 22 04 04 40 03 40 20 02 21 | !. .A.k&quot;..@.@ .!03 41 00 21 06 41 0A 21 07 03 40 20 03 41 0A 70 | .A.!.A.!..@ .A.p21 05 20 03 41 0A 6E 21 03 20 05 20 06 10 01 21 | !. .A.n!. . ...!06 20 05 20 07 10 00 21 07 20 03 41 00 4B 0D 00 | . . ...!. .A.K..0B 20 02 20 06 20 07 6C 6A 21 02 20 04 41 01 6B | . . . .lj!. .A.k22 04 0D 00 0B 0B 20 02 0B | &quot;..... .. 好家伙又是没见到过的东西。 去搜了一下。 WebAssembly（缩写为 Wasm）是基于堆栈的虚拟机的二进制指令格式。Wasm 被设计为编程语言的可移植编译目标，从而可以在 Web 上为客户端和服务器应用程序进行部署。 高效快捷：Wasm stack machine 设计为以节省大小和加载时间的二进制格式进行编码。WebAssembly旨在通过利用广泛平台上可用的通用硬件功能，以本机速度执行。 安全的：WebAssembly描述了一种内存安全的沙盒执行环境，该环境甚至可以在现有JavaScript虚拟机内部实现。当嵌入到Web中时，WebAssembly将强制执行浏览器的同源和权限安全策略。 开放且可调试：WebAssembly设计为以文本格式精美打印，用于手工调试，测试，实验，优化，学习，教学和编写程序。在Web上查看Wasm模块的来源时，将使用文本格式。 开放式网络平台的一部分：WebAssembly旨在维护Web的无版本，经过功能测试和向后兼容的性质。WebAssembly模块将能够调用和退出JavaScript上下文，并通过可从JavaScript访问的相同Web API来访问浏览器功能。WebAssembly还支持非Web嵌入。 搞了一下午了反汇编，得到： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758(module (func $Math.min (;0;) (import &quot;Math&quot; &quot;min&quot;) (param i32 i32) (result i32)) (func $Math.max (;1;) (import &quot;Math&quot; &quot;max&quot;) (param i32 i32) (result i32)) (func $Run (;2;) (export &quot;Run&quot;) (param $var0 i32) (param $var1 i32) (result i32) (local $var2 i32) (local $var3 i32) (local $var4 i32) (local $var5 i32) (local $var6 i32) (local $var7 i32) local.get $var0 local.set $var2 local.get $var1 i32.const 1 i32.sub local.tee $var4 if loop $label1 local.get $var2 local.set $var3 i32.const 0 local.set $var6 i32.const 10 local.set $var7 loop $label0 local.get $var3 i32.const 10 i32.rem_u local.set $var5 local.get $var3 i32.const 10 i32.div_u local.set $var3 local.get $var5 local.get $var6 call $Math.max local.set $var6 local.get $var5 local.get $var7 call $Math.min local.set $var7 local.get $var3 i32.const 0 i32.gt_u ;; a0 &gt; 0 br_if $label0 end $label0 local.get $var2 local.get $var6 local.get $var7 i32.mul ;; v6*v7 i32.add local.set $var2 local.get $var4 i32.const 1 i32.sub local.tee $var4 br_if $label1 end $label1 end local.get $var2 ) ) 好吧，看不懂这些指令，去学了wasm及其指令集，之后用python写了一下这个算法，不过奇怪的事情发现了，答案有时候对，有时候不对。奇怪的很！ two hour later ~ 偶然间发现浏览器开发者工具中的source不但可以直接得到反汇编后的代码，而且可以设断点，进行调式。 然后进行了优化，很快得到了正确解题代码： 123456789101112131415161718192021222324v0 = a[0]v1 = a[1]v2 = v0v3 = 0v4 = v1 - 1v5 = 0if v4 &gt; 0:\twhile True: v3 = v2 v6 = 0 v7 = 10 while True: v5 = v3 % 10 v3 = int(v3 / 10) 6 = max(v5, v6) v7 = min(v5, v7) if v3 &lt;= 0: break v2 = v2 + v6 * v7 v4 = v4 - v1 if v4 &lt;= 0: breaka = str(v2)"},{"title":"利用WSL在window环境下安装SpiningUp.md","path":"/2021-0328-利用WSL在windows环境下安装SpiningUp/","content":"Spining up的官方介绍 本模块包含各种有用的资源，包括： RL术语，各种算法和基本理论的简短介绍， 的文章如何成长为一个RL研究中的作用， 一个组织列表的重要论文组织了主题， 简短的，独立的关键算法实现的文档齐全的代码存储库， 并进行一些热身运动。 配置WSL简化版安装1wsl --install 重启即可。 手动安装启用适用于 Linux 的 Windows 子系统 以管理员身份打开 PowerShell 并运行： 1dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 启动虚拟机功能 以管理员身份打开 PowerShell 并运行： 1dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重启 将 WSL 2 设置为默认版本1wsl --set-default-version 2 安装所选的 Linux 分发 打开 Microsoft Store，并选择 Linux 分发版。 安装Xming X窗口服务器 https://sourceforge.net/projects/xming/ 安装Xming X窗口服务器，并确保它正在运行。 运行wsl 打开cmd，键入“ bash”，这会将cmd切换到WSL终端，然后运行以下命令，它将启用WSL的GUI。 1234sudo apt-get install x11-appsexport DISPLAY=localhost:0.0 nano ~/.bashrc #(add export DISPLAY=localhost:0.0 at the end. Ctrl+X to exit/save)sudo apt-get install gnome-calculator #will get you GT 下载miniconda https://conda.io/miniconda.html 下载适用于Linux的miniconda 。这将是一个“ .sh”文件。 从终端转到下载文件的文件夹，然后运行“ bash ”，这将安装conda。 ps:两个系统可以共享文件。 按照Spinningup教程进行其余的安装"},{"title":"使用paddlepaddle实现word2vec模型","path":"/2020-0920-基于paddlepaddle实现的word2vec模型/","content":"背景知识Embeddings Embedding（嵌入）是拓扑学里面的词。 在深度学习中的意思是使用低纬度的的数据表示高纬度的数据。例如，在NLP中，“ I have an apple ”这句话中的每个单词可以分别用4维向量表示。 I [1,0,0,0] have [0,1,0,0] an [0,0,1,0] apple [0,0,0,1] 这种方法叫做word embedding. One-Hot编码one-hot编码是将文本转化成二级制的一种编码。在训练word2vec模型之前，我们需要利用训练数据构建自己的词汇表，在对词汇表进行one-hot编码。 例如： 假设从我们的训练文档中抽取出100个唯一不重复的单词组成词汇表。我们对这100个单词进行one-hot编码，得到的每个单词都是一个100维的向量，向量每个维度的值只有0或者1，假如单词have在词汇表中的出现位置为第3个，那么have的one-hot表示就是一个第三维度取值为1，其他维都为0的100维的向量。 word2vec原理简述写在前面现在word2vec已经成为了自然语言处理领域的基础，在他之后的预训练模型或多或少都借鉴了他的一部分思想。 在word2vec训练完成之后，我们并不会使用这个模型处理新的任务，而是需要它的参数矩阵。word2vec模型有两种训练方法，skip-gram和CBOW。本文主要介绍使用skip-gram方法及其实现代码。 skip-gram如下图所示，直观理解skip-gram是给定input word来预测上下文。 训练过程我们拿“I have an apple”这句话举例。 首先选一个中间词作为input word，例如我们选择了have。 定义一个参数skip_windows ，它代表着从input word 的一侧（左或者右）选取词的数量，例如我们选取skip_windows &#x3D; 2,那么获得的窗口中的词(包换input word)是[I,have,an,apple] 定义一个参数num_skips ,他代表从整个窗口中选用多少次作为output word.例如当skip_windows &#x3D;2,并且num_skips &#x3D;2时，我们会得到两组{input word,output wold}。 神经网络通过这些数据输出一个概率分布，这个概率代表着我们词典中每个词是output wold的可能性。 代码网络结构定义代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118import mathimport numpy as npimport paddle.fluid as fluiddef skip_gram_word2vec(dict_size, embedding_size, is_sparse=False, neg_num=5): datas = [] input_word = fluid.layers.data(name=&quot;input_word&quot;, shape=[1], dtype=&#x27;int64&#x27;) true_word = fluid.layers.data(name=&#x27;true_label&#x27;, shape=[1], dtype=&#x27;int64&#x27;) neg_word = fluid.layers.data( name=&quot;neg_label&quot;, shape=[neg_num], dtype=&#x27;int64&#x27;) datas.append(input_word) datas.append(true_word) datas.append(neg_word) py_reader = fluid.layers.create_py_reader_by_data( capacity=64, feed_list=datas, name=&#x27;py_reader&#x27;, use_double_buffer=True) words = fluid.layers.read_file(py_reader) init_width = 0.5 / embedding_size input_emb = fluid.layers.embedding( input=words[0], is_sparse=is_sparse, size=[dict_size, embedding_size], param_attr=fluid.ParamAttr( name=&#x27;emb&#x27;, initializer=fluid.initializer.Uniform(-init_width, init_width))) true_emb_w = fluid.layers.embedding( input=words[1], is_sparse=is_sparse, size=[dict_size, embedding_size], param_attr=fluid.ParamAttr( name=&#x27;emb_w&#x27;, initializer=fluid.initializer.Constant(value=0.0))) true_emb_b = fluid.layers.embedding( input=words[1], is_sparse=is_sparse, size=[dict_size, 1], param_attr=fluid.ParamAttr( name=&#x27;emb_b&#x27;, initializer=fluid.initializer.Constant(value=0.0))) neg_word_reshape = fluid.layers.reshape(words[2], shape=[-1, 1]) neg_word_reshape.stop_gradient = True neg_emb_w = fluid.layers.embedding( input=neg_word_reshape, is_sparse=is_sparse, size=[dict_size, embedding_size], param_attr=fluid.ParamAttr( name=&#x27;emb_w&#x27;, learning_rate=1.0)) neg_emb_w_re = fluid.layers.reshape( neg_emb_w, shape=[-1, neg_num, embedding_size]) neg_emb_b = fluid.layers.embedding( input=neg_word_reshape, is_sparse=is_sparse, size=[dict_size, 1], param_attr=fluid.ParamAttr( name=&#x27;emb_b&#x27;, learning_rate=1.0)) neg_emb_b_vec = fluid.layers.reshape(neg_emb_b, shape=[-1, neg_num]) true_logits = fluid.layers.elementwise_add( fluid.layers.reduce_sum( fluid.layers.elementwise_mul(input_emb, true_emb_w), dim=1, keep_dim=True), true_emb_b) input_emb_re = fluid.layers.reshape( input_emb, shape=[-1, 1, embedding_size]) neg_matmul = fluid.layers.matmul( input_emb_re, neg_emb_w_re, transpose_y=True) neg_matmul_re = fluid.layers.reshape(neg_matmul, shape=[-1, neg_num]) neg_logits = fluid.layers.elementwise_add(neg_matmul_re, neg_emb_b_vec) #nce loss label_ones = fluid.layers.fill_constant_batch_size_like( true_logits, shape=[-1, 1], value=1.0, dtype=&#x27;float32&#x27;) label_zeros = fluid.layers.fill_constant_batch_size_like( true_logits, shape=[-1, neg_num], value=0.0, dtype=&#x27;float32&#x27;) true_xent = fluid.layers.sigmoid_cross_entropy_with_logits(true_logits, label_ones) neg_xent = fluid.layers.sigmoid_cross_entropy_with_logits(neg_logits, label_zeros) cost = fluid.layers.elementwise_add( fluid.layers.reduce_sum( true_xent, dim=1), fluid.layers.reduce_sum( neg_xent, dim=1)) avg_cost = fluid.layers.reduce_mean(cost) return avg_cost, py_readerdef infer_network(vocab_size, emb_size): analogy_a = fluid.layers.data(name=&quot;analogy_a&quot;, shape=[1], dtype=&#x27;int64&#x27;) analogy_b = fluid.layers.data(name=&quot;analogy_b&quot;, shape=[1], dtype=&#x27;int64&#x27;) analogy_c = fluid.layers.data(name=&quot;analogy_c&quot;, shape=[1], dtype=&#x27;int64&#x27;) all_label = fluid.layers.data( name=&quot;all_label&quot;, shape=[vocab_size, 1], dtype=&#x27;int64&#x27;, append_batch_size=False) emb_all_label = fluid.layers.embedding( input=all_label, size=[vocab_size, emb_size], param_attr=&quot;emb&quot;) emb_a = fluid.layers.embedding( input=analogy_a, size=[vocab_size, emb_size], param_attr=&quot;emb&quot;) emb_b = fluid.layers.embedding( input=analogy_b, size=[vocab_size, emb_size], param_attr=&quot;emb&quot;) emb_c = fluid.layers.embedding( input=analogy_c, size=[vocab_size, emb_size], param_attr=&quot;emb&quot;) target = fluid.layers.elementwise_add( fluid.layers.elementwise_sub(emb_b, emb_a), emb_c) emb_all_label_l2 = fluid.layers.l2_normalize(x=emb_all_label, axis=1) dist = fluid.layers.matmul(x=target, y=emb_all_label_l2, transpose_y=True) values, pred_idx = fluid.layers.topk(input=dist, k=4) return values, pred_idx 参考资料[1] Rong X. word2vec parameter learning explained[J]. arXiv preprint arXiv:1411.2738, 2014. [2] https://zhuanlan.zhihu.com/p/37471802 [3] https://aistudio.baidu.com/aistudio/projectdetail/978573","tags":["python","NLP"],"categories":["笔记"]},{"title":"SpringBoot中静态类调用自动注入的Mapper","path":"/2020-0803-SpringBoot中静态类调用自动注入的Mapper/","content":"问题在静态的方法中使用 Mybatis Mapper, SpringBoot注解@Autowired 是不行的。 解决方法创建一个工具类，并且使用 @PostConstruct 注解 。 该注解会在类加载之前自动执行标识的方法,并在方法中把静态的类赋值给非静态的类。 工具类代码123456789101112131415@Componentpublic class StaticUtil &#123; @Autowired private HumitureMapper humitureMapper; private static HumitureMapper staticHumitureMapper; @PostConstruct public void init() &#123; staticHumitureMapper = humitureMapper; &#125; public static HumitureMapper getStaticMapper() &#123; return staticHumitureMapper; &#125;&#125; 调用1234@AutowiredStaticUtil humitureMapper;HumitureMapper humitureMapper = StaticUtil.getStaticMapper(); 参考文章 https://blog.csdn.net/XmanAron/article/details/100515820","tags":["SpringBoot","物联网"],"categories":["java"]},{"title":"利用csv包读取和写入tsv文件","path":"/2020-0813-利用csv包读取或写入tsv文件/","content":"总结一下tsv文件的操作方法，备忘。 写文件123456import csvwith open(&#x27;file.tsv&#x27;, &#x27;w&#x27;) as f: tsv_w = csv.writer(f, delimiter=&#x27;\\t&#x27;) # delimiter必须 tsv_w.writerow([&#x27;id&#x27;, &#x27;name&#x27;, &#x27;score&#x27;]) # 单行写入 tsv_w.writerows([[1, &#x27;Frank&#x27;, 99], [2, &#x27;John&#x27;, 70]]) # 多行写入 读文件123456import csvwith open(&#x27;file.tsv&#x27;) as f: tsvreader = csv.reader(f, delimiter=&#x27;\\t&#x27;) for line in tsvreader: print(line) 通过修改解析文件模式实现上述操作12345678910import csv csv.register_dialect(&#x27;my_dialect&#x27;,delimiter=&#x27;\\t&#x27;,quoting=csv.QUOTE_ALL)with open(&#x27;file.tsv&#x27;,) as csv_file: file_list = csv.reader(csv_file,&#x27;my_dialect&#x27;) for line in file_list: print (line)csv.unregister_dialect(my_dialect) #注销","tags":["python","基础操作"],"categories":["笔记"]},{"title":"动物识别专家系统web版|人工智能导论","path":"/2020-0612-动物识别专家系统web版人工智能导论/","content":"简单实现。 Demo:https://blog.sunan.me/Animal-identification-expert/ tips:Demo仅仅国外代理可以访问，国内ip自动跳转Coding Github: https://github.com/mofengboy/Animal-identification-expert index.htmllt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-cn&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;!-- 引入样式 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;&gt; &lt;!-- 引入组件库 --&gt; &lt;script src=&quot;https://unpkg.com/element-ui/lib/index.js&quot;&gt;&lt;/script&gt; &lt;!-- 规则文件--&gt; &lt;script src=&quot;rule.js&quot;&gt;&lt;/script&gt; &lt;title&gt;动物识别系统&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot; class=&quot;app&quot;&gt; &lt;h2 style=&quot;text-align: center&quot;&gt;动物识别系统&lt;/h2&gt; 规则： &lt;div class=&quot;rule&quot;&gt; &lt;p&gt;R1 IF 该动物有奶 THEN 该动物是哺乳动物&lt;/p&gt; &lt;p&gt;R2 IF 该动物有毛发 THEN 该动物是哺乳动物&lt;/p&gt; &lt;p&gt;R3 IF 该动物有羽毛 THEN 该动物是鸟&lt;/p&gt; &lt;p&gt;R4 IF 该动物会飞 AND 会下蛋 THEN 该动物是鸟&lt;/p&gt; &lt;p&gt;R5 IF 该动物有爪 AND 有犬齿 AND 眼盯前方 THEN 该动物是食肉动物&lt;/p&gt; &lt;p&gt;R6 IF 该动物吃肉 THEN 该动物是肉食动物&lt;/p&gt; &lt;p&gt;R7 IF 该动物是哺乳动物 AND 有蹄 THEN 该动物是有蹄类动物&lt;/p&gt; &lt;p&gt;R8 IF 该动物是哺乳动物 AND 嚼反刍 THEN 该动物是有蹄类动物&lt;/p&gt; &lt;p&gt;R9 IF 该动物是哺乳动物 AND 该动物是食肉动物 AND 是黄褐色 AND 身上有黑色条纹 THEN 该动物是虎&lt;/p&gt; &lt;p&gt;R10 IF 该动物是哺乳动物 AND 该动物是食肉动物AND是黄褐色 AND 身上有暗斑点 THEN 该动物是金钱豹&lt;/p&gt; &lt;p&gt;R11 IF 该动物是有蹄类动物 AND 有长脖子 AND 有长腿 AND 身上有暗斑点 THEN 该动物是长颈鹿&lt;/p&gt; &lt;p&gt;R12 IF 该动物是有蹄类动物 AND 身上有黑色条纹 THEN 该动物是斑马&lt;/p&gt; &lt;p&gt;R13 IF 该动物是鸟 AND 有不会飞 AND 有长腿 AND 长脖子 AND 是黑白二色 THEN 该动物是鸵鸟&lt;/p&gt; &lt;p&gt;R14 IF 该动物是鸟 AND 不会飞 AND 会游泳 AND 是黑白二色 THEN 该动物是企鹅&lt;/p&gt; &lt;p&gt;R15 IF 该动物是鸟 AND 善飞 &lt;/div&gt; 特征： &lt;div class=&quot;fact&quot;&gt; &lt;div style=&quot;display: inline&quot; v-for=&quot;(fact,index) in featureView&quot;&gt; &lt;el-button class=&quot;fact_item&quot; plain v-on:click=&quot;addFact(index,fact)&quot;&gt;&#123;&#123;fact&#125;&#125;&lt;/el-button&gt; &lt;/div&gt; &lt;/div&gt; 已选特征： &lt;div class=&quot;select&quot;&gt; &lt;div style=&quot;display: inline&quot; v-for=&quot;(fact,index) in selectRuleName&quot;&gt; &lt;el-button class=&quot;fact_item&quot; plain&gt;&#123;&#123;fact&#125;&#125;&lt;/el-button&gt; &lt;/div&gt; &lt;/div&gt; 推测结果： &lt;div class=&quot;result&quot;&gt; &lt;div v-for=&quot;(animal,index) in animalName&quot;&gt; &lt;div&gt;&#123;&#123;animal&#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;button&quot;&gt; &lt;el-button type=&quot;primary&quot; plain v-on:click=&quot;matchRule()&quot;&gt;推理&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain v-on:click=&quot;resetSelect()&quot;&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;el-dialog title=&quot;增加规则&quot; :visible.sync=&quot;dialogVisible&quot;&gt; &lt;div style=&quot;margin: 10px auto&quot;&gt; &lt;img style=&quot;width: 100%&quot; src=&quot;https://pic.downk.cc/item/5ee20abac2a9a83be59c565f.png&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; 结果： &lt;el-input placeholder=&quot;请输入内容&quot; suffix-icon=&quot;el-icon-date&quot; v-model=&quot;input0&quot;&gt; &lt;/el-input&gt; &lt;/div&gt; 条件(默认为0): &lt;div class=&quot;input-size&quot;&gt; &lt;div class=&quot;item-input-size&quot;&gt; &lt;el-input placeholder=&quot;请输入内容&quot; suffix-icon=&quot;el-icon-date&quot; v-model=&quot;input1&quot;&gt; &lt;/el-input&gt; &lt;/div&gt; &lt;div class=&quot;item-input-size&quot;&gt; &lt;el-input placeholder=&quot;请输入内容&quot; suffix-icon=&quot;el-icon-date&quot; v-model=&quot;input2&quot;&gt; &lt;/el-input&gt; &lt;/div&gt; &lt;div class=&quot;item-input-size&quot;&gt; &lt;el-input placeholder=&quot;请输入内容&quot; suffix-icon=&quot;el-icon-date&quot; v-model=&quot;input3&quot;&gt; &lt;/el-input&gt; &lt;/div&gt; &lt;div class=&quot;item-input-size&quot;&gt; &lt;el-input placeholder=&quot;请输入内容&quot; suffix-icon=&quot;el-icon-date&quot; v-model=&quot;input4&quot;&gt; &lt;/el-input&gt; &lt;/div&gt; &lt;div class=&quot;item-input-size&quot;&gt; &lt;el-input placeholder=&quot;请输入内容&quot; suffix-icon=&quot;el-icon-date&quot; v-model=&quot;input5&quot;&gt; &lt;/el-input&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;button&quot;&gt; &lt;el-button style=&quot;width: 100%&quot; type=&quot;primary&quot; v-on:click=&quot;addRule()&quot;&gt;确认添加&lt;/el-button&gt; &lt;/div&gt; &lt;/el-dialog&gt; &lt;el-backtop visibility-height=&quot;0&quot; v-on:click=&quot;openDialog()&quot;&gt;&lt;i class=&quot;el-icon-plus&quot;/&gt;&lt;/el-backtop&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; new Vue(&#123; el: &#x27;#app&#x27;, data() &#123; // 数据 return &#123; dialogVisible: false, featureView: [ &quot;&quot;, &quot;有毛发&quot;, &quot;有奶&quot;, &quot;有羽毛&quot;, &quot;会飞&quot;, &quot;会下蛋&quot;, &quot;吃肉&quot;, &quot;有犬齿&quot;, &quot;有爪&quot;, &quot;眼盯前方&quot;, &quot;有蹄&quot;, &quot;嚼反刍&quot;, &quot;黄褐色&quot;, &quot;身上有暗斑点&quot;, &quot;身上有黑色条纹&quot;, &quot;有长脖子&quot;, &quot;有长腿&quot;, &quot;不会飞&quot;, &quot;会游泳&quot;, &quot;有黑白二色&quot;, &quot;善飞&quot;, &quot;哺乳动物&quot;, &quot;鸟&quot;, &quot;食肉动物&quot;, &quot;蹄类动物&quot; ], factView: [ &quot;&quot;, &quot;有毛发&quot;, &quot;有奶&quot;, &quot;有羽毛&quot;, &quot;会飞&quot;, &quot;会下蛋&quot;, &quot;吃肉&quot;, &quot;有犬齿&quot;, &quot;有爪&quot;, &quot;眼盯前方&quot;, &quot;有蹄&quot;, &quot;嚼反刍&quot;, &quot;黄褐色&quot;, &quot;身上有暗斑点&quot;, &quot;身上有黑色条纹&quot;, &quot;有长脖子&quot;, &quot;有长腿&quot;, &quot;不会飞&quot;, &quot;会游泳&quot;, &quot;有黑白二色&quot;, &quot;善飞&quot;, &quot;哺乳动物&quot;, &quot;鸟&quot;, &quot;食肉动物&quot;, &quot;蹄类动物&quot;, &quot;金钱豹&quot;, &quot;虎&quot;, &quot;长颈鹿&quot;, &quot;斑马&quot;, &quot;鸵鸟&quot;, &quot;企鹅&quot;, &quot;信天翁&quot; ], rule: [], selectRuleName: [], selectRule: [], animalName: [], input0: &quot;&quot;, input1: 0, input2: 0, input3: 0, input4: 0, input5: 0, &#125; &#125;, // 生命周期 网页渲染前执行的函数 mounted() &#123; // 加载规则文件 this.rule = rule; console.log(this.rule) &#125;, // 方法 methods: &#123; addFact: function (index, name) &#123; if (index !== 0) &#123; this.selectRuleName.push(name); this.selectRule.push(index); &#125; &#125;, openDialog: function () &#123; this.dialogVisible = true; &#125;, matchRule: function () &#123; let count = 0; let flag = true; for (let i = 0; i &lt; this.rule.length; i++) &#123; // console.log(this.rule[i]); for (let j = 0; j &lt; this.selectRule.length; j++) &#123; for (let k = 1; k &lt; this.rule[k].length; k++) &#123; if (this.selectRule[j] === this.rule[i][k]) &#123; ++count; &#125; &#125; &#125; if (this.selectRule.length === count) &#123; console.log(this.factView[this.rule[i][0]]); this.animalName.push(this.factView[this.rule[i][0]]); //return this.rule[i][0]; flag = false; &#125; count = 0; &#125; //console.log(0); if (flag) &#123; this.animalName = [&quot;无匹配&quot;]; return 0; &#125; &#125;, resetSelect: function () &#123; this.selectRuleName = []; this.selectRule = []; this.animalName = [] &#125;, addRule: function () &#123; let newRule = []; newRule.push(parseInt(this.input0)); newRule.push(parseInt(this.input1)); newRule.push(parseInt(this.input2)); newRule.push(parseInt(this.input3)); newRule.push(parseInt(this.input4)); newRule.push(parseInt(this.input5)); this.rule.push(newRule); this.$message(&#123; message: &#x27;添加成功！&#x27;, type: &#x27;success&#x27; &#125;); this.dialogVisible = false; console.log(this.rule) &#125; &#125; &#125;)&lt;/script&gt;&lt;style&gt; .app &#123; margin: auto; padding: 5px 15px 15px 15px; width: 60%; box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1) &#125; .rule &#123; margin: auto; padding: 0 30px; &#125; .fact &#123; margin: auto; padding: 0 30px; &#125; .fact_item &#123; margin: 5px; &#125; .select &#123; padding: 0 30px; text-align: center;; &#125; .result &#123; margin: auto; padding: 0 30px; text-align: center;; &#125; .button &#123; width: 200px; margin: auto; padding-top: 20px; padding-bottom: 30px; &#125; .input-size &#123; margin: 5px auto; &#125; .item-input-size &#123; margin: 5px auto; width: 19%; display: inline-block; &#125;&lt;/style&gt;&lt;/html&gt; rule.js 123456789101112131415161718let rule = [ [0, 0, 0, 0, 0, 0], [21, 1, 0, 0, 0, 0], [21, 2, 0, 0, 0, 0], [22, 3, 0, 0, 0, 0], [22, 4, 5, 0, 0, 0], [23, 6, 0, 0, 0, 0], [23, 7, 8, 9, 0, 0], [24, 21, 10, 0, 0, 0], [24, 21, 11, 0, 0, 0], [25, 21, 23, 12, 13, 0], [26, 21, 23, 12, 14, 0], [27, 24, 15, 16, 13, 0], [28, 24, 14, 0, 0, 0], [29, 22, 15, 16, 17, 19], [30, 22, 18, 17, 19, 0], [31, 22, 20, 0, 0, 0],];","tags":["vue","作业"],"categories":["chat"]},{"title":"Latex实现表格并排","path":"/2020-0424-Latex实现表格并排/","content":"笔记。 Latex 表格并排。 12345678910111213141516171819202122232425262728293031323334353637383940\\begin&#123;minipage&#125;&#123;\\textwidth&#125; \\begin&#123;minipage&#125;[h]&#123;0.5\\textwidth&#125; \\centering \\begin&#123;threeparttable&#125; \\begin&#123;tabular&#125;&#123;l|ll|l&#125; \\hline &amp; OFF &amp; NOT &amp; TOTAL \\\\ \\hline OLIDv1.0 &amp; 4400 &amp; 8840 &amp; 859 \\\\ EXPAND &amp; 27038 &amp; 27107 &amp; 54145 \\\\ \\hline \\end&#123;tabular&#125; \\begin&#123;tablenotes&#125; \\footnotesize \\item[] The %此处加入注释*信息 \\end&#123;tablenotes&#125; \\end&#123;threeparttable&#125; \\makeatletter\\def\\@captype&#123;table&#125;\\makeatother\\caption&#123;Data set:Task A&#125; \\label&#123;Data set:Task A&#125; \\end&#123;minipage&#125; \\begin&#123;minipage&#125;[h]&#123;0.5\\textwidth&#125; \\centering \\begin&#123;threeparttable&#125; \\begin&#123;tabular&#125;&#123;cccc&#125; \\hline A &amp; B &amp; C &amp; Test \\\\ \\hline OFF &amp; TIN &amp; IND &amp; 580 \\\\ OFF &amp; TIN &amp; OTH &amp; 80 \\\\ OFF &amp; TIN &amp; GPR &amp; 190 \\\\ OFF &amp; UNT &amp; - &amp; 572 \\\\ NOT &amp; - &amp; - &amp; 2807 \\\\ \\hline ALL &amp; &amp; &amp; 3887 \\\\ \\hline \\end&#123;tabular&#125; \\begin&#123;tablenotes&#125; \\footnotesize \\item[] %此处加入注释*信息 \\end&#123;tablenotes&#125; \\end&#123;threeparttable&#125; \\makeatletter\\def\\@captype&#123;table&#125;\\makeatother\\caption&#123;Dataset statistics&#125; \\label&#123;Dataset statistics&#125; \\end&#123;minipage&#125;\\end&#123;minipage&#125;","tags":["Latex"],"categories":["tools"]},{"title":"专业导论课上的大学阶段web项目开发经验分享","path":"/2020-0413-专业导论课上的大学阶段web项目开发经验分享/","content":"这是一篇整理稿。内容可能不尽相同，但也有一定的补充，仍然采用第一人称口吻。 WEB开发讲座大家好，今天我来和大家分享一下关于web开发的基本知识和开发经验。 因为我们目前的目的也是为了做一些项目，也不是为了考试什么的，所以我今天不会纠结于一些基础知识。今天主要是从如何快速构建web项目的方向来讲解。 目录 今天我会分为四个部分来分别介绍。 第一部分主要讲简单的讲一下web的基础和框架。也会简单的说一下平时我们遇到的库和框架的区别。 第二部分是后端框架ThinkPHP php语言就不介绍了，入门还是比较容易的，主要来说一下框架如何上手，结合thinkphp框架即使php语言在懵懂阶段，但只要理解了这个框架的思想也可以很快的搭建完一个后端。 第三部分来讲一下前后端分离式开发。主要说一下前后端分离式开发的好处和如何进行前后端分离式开发。 第四部分是来分享一下模块化开发的好处，尤其是对于我们大学这个初期做项目的阶段。 WEB前端基础和框架说web前端，肯定离不开的就是web的三要素。 HTML是一种信息模型（Model），中文翻译过来就是超文本标记语言，是一种标识性的语言。网页可以比作一篇文章，html就是把用来架构这篇文章的。学起来很简单。 CSS是层叠样式表。用来控制样式（View），规范来说，html上虽然也有一些控制样式的标签，比如控制表格宽度，表格边框什么的，但是不推荐使用，因为这是css的活，如果你用一些IDE来写代码的话，他应该会提示你，建议你不要这样做。每种语言做好自己的就够了，这也是我们编程的思想，要不然你写的代码就会很乱。 JavaScript。负责调度数据和实现某种展现逻辑。这种语言就有点感觉了，他和上面那俩都不是一个级别的。不过js入门也不难，也可以很快学会。但是如果深入起来，他就是个大家伙了，尤其这几年已将成为了全栈的语言。他可以用来做前端、后端、游戏、人工智能、物联网和机器人编程等，我简单提一下js用作人工智能的情况，因为我感觉这方面可以做出来点东西。现在我发现很多软件，包括游戏，甚至是编程语言都在向跨平台，web化方向发展，举个例子就比如微信小程序等各种小程序都是开发者开发好之后，直接相当于部署到各个设备，不管你是什么手机，只要你安装离微信就可以。而且还是点开即用，无需安装。在加上像谷歌这样的大公司已经开源了一些人工智能的js框架，TensorFlow、Brain什么的，我们完全可以开发出一个运行在客户端的机器学习算法。这样做的好处就是机器学习如果实时计算的话，恐怕服务器很难承受那么的压力，这样把计算量分到客户那里，就会减少很多压力。好了这个就说到这里，我们继续。 框架和库的区别现在有很多的库和框架，初学可能有点摸不清哪个好，我也不说哪个好哈，我分享一下我理解的部分。 框架就是提供了前端项目整体解决在实际中，像node、vue就属于框架，而jQuery、React、就是库，在前者中我们完全可以自由的使用后者，同时也可以没有前者的基础之上使用后者，都是很自由，控制权始终在我们的手中，但是使用框架时候就必须按照它的规范来进行模块化的开发. Vue.js 下面我通过 vue.js 介绍一下前端框架对我们的开发带来的好处以及他自身的优点。 生态支持首先它是国人开发，拥有强大的中文社区和生态。框架和其衍生产品的官方文档就是中英双语的。因为我们中国在国际上的话语权越来越强，当然在前端框架方面也不能落后。Vue在国际交友网站Github上的排名还是很靠前的。 MVVM思想Vue通过通过MVVM思想实现数据的双向绑定，让开发者不用再操作dom对象，有更多的时间去思考业务逻辑。 MVVM是Model-View-ViewModel的缩写，他的思想简单来说就是，你更改一个model层的数据之后，也不用刷新，也不用操作dom,视图层就很以最优的方式进行更新。 另外Vue通过组件，把一个单页应用中的各种模块拆分到一个一个单独的组件（component）中，我们只要先在父级应用中写好各种组件标签也就是先占坑，并且在组件标签中写好要传入组件的参数，就像给函数传入参数一样，这个参数叫做组件的属性，然后再分别写好各种组件的实现填坑，然后整个应用就算做完了。对应多人项目的架构和开发非常有帮助。 虚拟DOMVue通过虚拟DOM,加快渲染速度。 现在的网速越来越快了，很多人家里都是上百M的光纤，手机也是4G起步了，按道理一个网页才几百K，而且浏览器本身还会缓存很多资源文件，那么几十M的光纤为什么打开一个之前已经打开过，已经有缓存的页面还是感觉很慢呢？这就是因为浏览器本身处理DOM也是有性能瓶颈的，尤其是在传统开发中，用JQuery或者原生的JavaScript DOM操作函数对DOM进行频繁操作的时候，浏览器要不停的渲染新的DOM树，导致页面看起来非常卡顿。 而Virtual DOM则是虚拟DOM的英文，简单来说，他就是一种可以预先通过JavaScript进行各种计算，把最终的DOM操作计算出来并优化，由于这个DOM操作属于预处理操作，并没有真实的操作DOM，所以叫做虚拟DOM。最后在计算完毕才真正将DOM操作提交，将DOM操作变化反映到DOM树上。 之前使用原生js或者jquery写页面的时候会发现操作DOM是一件非常麻烦的一件事情，往往是DOM标签和js逻辑同时写在js文件里，数据交互时不时还要写很多的input隐藏域，如果没有好的代码规范的话会显得代码非常冗余混乱，耦合性高并且难以维护。 另外一方面在浏览器里一遍又一遍的渲染DOM是非常非常消耗性能的，常常会出现页面卡死的情况；所以尽量减少对DOM的操作成为了优化前端性能的必要手段，vue就是将DOM的对比放在了js层，通过对比不同之处来选择渲染DOM节点，从而提高渲染效率。 后端框架 这里用我比较熟悉的一个php框架 thinkPHP来介绍。作为一个整体开发解决方案，ThinkPHP能够解决应用开发中的大多数需要，因为其自身包含了底层架构、兼容处理、基类库、数据库访问层、模板引擎、缓存机制、插件机制等常用的组件，并且对于跨版本、跨平台和跨数据库移植都比较方便。并且每个组件都是官方精心设计和完善的，应用开发过程仅仅需要关注业务逻辑，就比如ThinkPHP有个模型的概念，每个模型对应数据库的一张数据表，操作这个模型实例就是操作数据库，这种方式可以使你即使不太懂sql语言，也能完成基本的增删改查功能。 社区支持还有第二点和vue一样，是国产的。他的生态也非常强，也不能说生态强，他的社区强，事情资源和讨论非常丰富。开发中遇到的绝大数问题在网上都能搜到解决办法。 还有最重要的是他上手简单。 在没有任何对ThinkPHP的了解情况下，甚至对PHP语法都没完全掌握的时候，第一次接触它，从学习到开发完成任务一个星期不到就解决了。速度之快让人很有成就感，可以在初期开发时让自己充满信心。 控制器首先是控制器。这个应该是框架的通用功能了，绝大部分框架都会单独分出控制器。按照ThinkPHP的架构设计，所有的URL请求（无论是否采用了路由），最终都会定位到控制器。 模型简单来说就是对数据库进行封装。 文件管理，比如我们有用户的上传和下载文件需求，或者上传头像什么的，用thinkPHP框架的话，并不需要你的额外操作，只要调用相应的方法就可以。 ThinkPHP的扩展机制扩展机制是thinkPHP的核心功能之一，因为thinkPHP为了让新手更容易上手，所以封装了大量的东西，但是这样也一定会降低灵活性，如果把thinkPHP框架与java的springboot框架作比较，这两个框架同样是对业务底层进行封装，但springboot框架是要自己来完成封装，有很大的灵活性，却对新手不那么友好，因为你需要学很多额外的，业务之外的知识，同时也不见得能做好优化。所以ThinkPHP为了增强灵活性而又不提高上手的难度，在核心中加入了扩展机制。让用户自定义来扩展扩展的功能。 前后端分离式开发 首先，开发团队前后端分离化，让前后端工程师只需要专注于前端或后端的开发。 第二点是能更好的适应复杂多变的前端需求。我们这个阶段做项目按照软件工程那样先写文档在写项目的应该很少吧，至少我没见过。当然也会写文档，但文档上基本只是一个大概的设计，而且文档上写的也不能保证以后就要按照这个做。尤其对于前端来说，灵感一来，就改了。这时候如果我们前后端写在一起，就会非常恼火，因为前端一改，后端要改好多，牵一发而动全身。而前端却又要照顾后端，不能设计出更好看的前端，也很恼火。这时候一种新的解决办法，前后端分离式开发逐渐引起了我们的重视。逐渐我们摸索出了一套流程。 后端把各种功能做成API,放在第三方接口管理平台EOlinker上，前端用http请求去调用这些API,这样前后端随意折腾，只要保证api没有大的变化就行。 这样我们通过api文档进行交流，大大减少了内耗，提高了效率，增加了友谊，终于不会因为修改需求而干架了。 模块式开发 现在我们更进一步，介绍一个更能增加友谊的方法，模块式开发。 如果说前后端分离式开发能减少前端和后端之间不必要的内耗，而模块式开发能最大限度的减少组内之间的内耗。 模块式开发的好处有很多，我还是简单提几个对我们帮助最大的。 第一个是业务拓展更加方便，不管是前端还是后端都能很好的进行业务拓展，这时候业务拓展就变成了一个增加模块的事情。 第二点能更好的统一规范，让代码看起来更和谐，那怎么统一规范呢。就是用统一的公共基础库。像基础UI库、工具库、网络库等等。UI库可以让页面开起来和谐统一，工具库和网络库可以规范服务的请求方式。这些库想当于公共模块的一部分，可以任由组内成员调用。 第三点是更有利于组内成员之间的合作，每个人至少负责一个模块，自己折腾属于自己的那部分，而又同时可以观察其他人的进度。 第四点是可以对模块进行复用。比如上面那个eolinker上的截图就是把后端分成了几个模块。其中的用户模块很多地方都有使用。 比如我要发一个帖子，然后在这个发帖模块里面首先需要调用用户模块，来对这个用户进行身份验证，然后如果里面有图片，还需要调用文件处理的模块，同时还需要调用内容审核的模块来对图片进行审核，看图片是否违规等等。模块是一个较大系统的独特的部件，它能够由设计者独立设计出来，同时又可以作为一个整体在系统中运转。 微应用如果项目比较复杂的话还可以进一步，把模块进行独立，做成微应用的方式。例如，你如果有两个后端，一个是算法部分python写的，一个是数据交互的后端php写的，就可以把这两个的出口部分做成微应用，后端之间的调用也用url的方式进行调用，这样更能降低耦合性。","tags":["项目","经验分享"],"categories":["chat"]},{"title":"阿里云ECS centos6被挖矿病毒kdevtmpfsi侵入解决过程","path":"/2020-0413-阿里云ECScentos6被挖矿病毒kdevtmpfsi侵入解决过程/","content":"症状学校组织的服务器最近HTTP请求很慢，理论上这个服务器的访问量在这个阶段不应该高。 远程连接服务器之后，发现CPU使用率接近100%，而一个叫kdevtmpfsi进程占用了99%的cpu资源，网上搜索了一下这个进程，发现是个挖矿木马进程。 解决过程尝试杀掉进程和删除文件 ps -ef | grep kdevtmpfsi 发现有两个进程在运行，kill这两个进程并且删掉源文件之后，不到一分钟，这个进程又恢复了，删除的文件也恢复了。 然后我尝试使用systemctl查看这个进程是否有守护进程。 12[root@iZm5ej3k8*******]# systemctl statu 28477-bash: systemctl: command not found 查阅资料得知这个服务器的系统是centos6 不支持systemctl命令。 只能换个方法了。 使用service代替systemctl查到kdevtmpfsi的守护进程为kinsing 附对照表 引自： http://www.361way.com/systemctl/3709.html 任务 旧指令 新指令 使某服务自动启动 chkconfig –level 3 httpd on systemctl enable httpd.service 使某服务不自动启动 chkconfig –level 3 httpd off systemctl disable httpd.service 检查服务状态 service httpd status systemctl status httpd.service （服务详细信息）systemctl is-active httpd.service （仅显示是否 Active) 加入自定义服务 chkconfig –add test systemctl load test.service 删除服务 chkconfig –del xxx 停掉应用，删除相应的配置文件 显示所有已启动的服务 chkconfig –list systemctl list-units –type&#x3D;service 启动某服务 service httpd start systemctl start httpd.service 停止某服务 service httpd stop systemctl stop httpd.service 重启某服务 service httpd restart systemctl restart httpd.service kill守护进程 杀掉守护进程 kinsing ,然后删除文件。 杀掉kdevtmpfsi进程，然后删掉文件。 全局搜索这两个文件，并删除。 12find / -name &quot;*kdevtmpfsi*&quot;find / -name &quot;*kingsing*&quot; 在我第一次操作过程中，由于只是关掉了进程并没有删除文件，所以又重新运行了。 5分钟过去了，没事。 9分钟过去了，没事。 10分钟后又来了！ 草。。。 屏蔽IP地址，重置公钥和实例远程登录密码 发现这两个进程有ip地址一直保持连接，而且ip地址属于俄罗斯。 重置ssh公钥 重置实例远程登录密码 10分钟后又来了！！ 还换了俩IP地址。 阿里云提交工单工单交流了几个小时后，阿里云建议我备份数据，然后初始化磁盘。 我tm那么多数据，关键还不全是我的。。 查看是否有定时任务1234# 查询crontab -l# 删除 crontab -e 没有发现可疑定时任务。 最终解决办法大家不要学我 Σ( ° △ °|||)︴ ，我最后迫不得已选择了用魔法打败魔法。 我写了一个shell脚本，用来kill这两个进程，创建了一个定时任务，一分钟执行一次。 1234567891011#!/bin/bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATHkill -9 $(ps -ef | grep kdevtmpfsi| grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;)kill -9 $(ps -ef | grep kinsing| grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;)rm -rf /tmp/kdevtmpfsi rm -rf /var/tmp/kinsing echo &quot;----------------------------------------------------------------------------&quot;endDate=`date +&quot;%Y-%m-%d %H:%M:%S&quot;`echo &quot;★[$endDate] Successful&quot;echo &quot;----------------------------------------------------------------------------&quot; 后续后来解决了。 因为服务器学校组织的，长时间下来积累了一些废弃的应用和开放了一下不必要的端口，后来根据阿里云安全中心的提示，发现是 redis 6379配置问题。 具体相关可以查看阿里云的文档。 https://help.aliyun.com/knowledge_detail/37447.html","tags":["黑客","挖矿","centos6","shell"],"categories":["Linux"]},{"title":"Hexo 自定义域名双线部署到Coding和Github","path":"/2020-0321-Hexo 自定义域名双线部署到Coding和Github/","content":"起因我今天把博客迁移到Github之后，发现速度是真的慢。。 所以我决定双线部署一下博客，用Coding做国内源，用Github做国外源，然后分别DNS解析。 每个服务具体的操作我就不介绍了，可以看我以前的博客，或者网上查询，我主要说一下怎么双线部署。 域名解析Coding平台使用的是CNAME解析，绑定自定义域名之后，可以一键申请到SSL证书。 Github平台我采用的是A记录解析，同样也是为了强制SSL，共有四个IP地址可供选择。 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 分别解析 Hexo _config.yml配置12345678# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: github: git@github.com:mofengboy/mofengboy.github.io.git coding: git@e.coding.net:mofengboy/blog/blog.git branch: master 完成这样hexo d之后就可以同时部署到两个平台了。","tags":["Github","Hexo","Coding","博客"],"categories":["tools"]},{"title":"博客迁移至Github Pages","path":"/2020-0321-博客迁移至Github Pages/","content":"折腾来折腾去，我又回来这里了。","tags":["hexo","Github","博客"],"categories":["chat"]},{"title":"利用Hexo和GitHub搭建独立博客","path":"/2019-1013-利用Hexo和GitHub搭建独立博客/","content":"准备工作：1.检查电脑是否安装了 Git ？git --version2.检查是否安装node?node -v 本地搭建博客1.在合适位置创建一个一个名为blog的文件夹，鼠标右击打开Git Bush Here 2.安装Hexo 2.1 cnpm install -g hexo 2.2hexo init看到以下目录结构说明初始化完成 2.3 选择主题 git clone https://gitee.com/xiuxiuing/hexo-theme-even themes/even 这里选择的是even主题，获取更多主题可以访问 https://hexo.io/themes 2.4 _config.yml对博客进行基础配置 修改博客名字、作者名字、和主题 主题改为theme:even 保存。 2.5 本地预览博客 首先安装两个插件 12cnpm install hexo-renderer-scss --savecnpm install hexo-deployer-git --save 编译项目，输入命令： hexo g 运行项目，输入命令： hexo s 在浏览器中输入http://localhost:4000/就可以看到效果啦 部署到Github上3.1 注册Github账号并创建博客仓库 如果是首次使用github,需要先设置Ssh key 3.1.1 设置git的user name和email,需要操作以下命令，自行替换相应字段。 12git config --global user.name &quot;Mofeng&quot;git config --global user.email &quot;me@sunan.me&quot; 3.1.2 生成Ssh Key ssh-keygen -t rsa -C &quot;me@sunan.me&quot; 过程不需要设置密码。直接按回车或y直至结束。 3.1.3 打开C:\\Users\\用户名.ssh,可以看到三个文件。 3.1.4 用记事本打开id_rsa.pub，复制里面的所有内容，打开setting页面中的SSH and GPG keys,然后 new ssh key 3.1.5 将复制的内容粘贴到key 中 3.2 修改项目根目录的__config.yml文件，完成部署配置。 3.3 输入命令 hexo d 打开你设置的仓库地址 https://mofengmo.github.io 成功。","tags":["hexo","Github"],"categories":["tools"]},{"title":"输入名字识别男女开发全过程附实例","path":"/2019-0425-输入名字识别男女开发全过程附实例/","content":"简述：基于概率论的分类方法 :朴素贝叶斯 通过分析7000个人的名字，分别计算男女名字中含有某个的概率， 如果男孩子名字的概率大于女孩子的，则判断结果为男孩子。 算法部分从数据库中读取名字和性别1234567891011121314151617181920212223242526272829# 从数据库中读取名字和性别# 训练集数据为7000def input_name(): # 连接数据库 conn = pymysql.connect(host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, db=&#x27;person_name&#x27;, charset=&#x27;utf8&#x27;) cursor = conn.cursor() # 读取数据 cursor.execute(&quot;SELECT * FROM student&quot;) names_data = cursor.fetchmany(7000) # 分类男女数据 boy_str = &#x27;&#x27; girl_str = &#x27;&#x27; for i in names_data: # 去除姓分别拼接所有名字为字符串 if i[2] == &#x27;男&#x27;: boy_str = boy_str + i[1][1:3] else: girl_str = girl_str + i[1][1:3] # 保存为字典类型并返回 sex_data = &#123;&#x27;男&#x27;: boy_str, &#x27;女&#x27;: girl_str &#125; # 提交，不然无法保存新建或者修改的数据 conn.commit() # 关闭游标 cursor.close() # 关闭连接 conn.close() return sex_data 计算字符概率12345678910111213141516# 计算字符概率def probability(words): d = &#123;&#125; # 统计出现的字符个数 for x in words: if x in d: d[x] = d[x] + 1 else: d[x] = 1 # 计算字符出现概率 word_probability = &#123;&#125; for i in d: word_probability[i] = d[i] / 7000 return word_probability 概率数据存入数据库123456789101112131415161718192021# 概率数据存入数据库def save_mysql(word_data, sex): # 连接数据库 conn = pymysql.connect(host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, db=&#x27;person_name&#x27;, charset=&#x27;utf8&#x27;) cursor = conn.cursor() if sex == &#x27;男&#x27;: # 循环存入数据 sql = &quot;INSERT INTO boy (word,probability) VALUES (%s,%s)&quot; for i in word_data: cursor.execute(sql, (i, word_data[i])) else: # 循环存入数据 sql = &quot;INSERT INTO girl (word,probability) VALUES (%s,%s)&quot; for i in word_data: cursor.execute(sql, (i, word_data[i])) # 提交，不然无法保存新建或者修改的数据 conn.commit() # 关闭游标 cursor.close() # 关闭连接 conn.close() 训练部分完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import pymysql # 计算字符概率def probability(words): d = &#123;&#125; # 统计出现的字符个数 for x in words: if x in d: d[x] = d[x] + 1 else: d[x] = 1 # 计算字符出现概率 word_probability = &#123;&#125; for i in d: word_probability[i] = d[i] / 7000 return word_probability # 从数据库中读取名字和性别# 训练集数据为7000def input_name(): # 连接数据库 conn = pymysql.connect(host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, db=&#x27;person_name&#x27;, charset=&#x27;utf8&#x27;) cursor = conn.cursor() # 读取数据 cursor.execute(&quot;SELECT * FROM student&quot;) names_data = cursor.fetchmany(7000) # 分类男女数据 boy_str = &#x27;&#x27; girl_str = &#x27;&#x27; for i in names_data: # 去除姓分别拼接所有名字为字符串 if i[2] == &#x27;男&#x27;: boy_str = boy_str + i[1][1:3] else: girl_str = girl_str + i[1][1:3] # 保存为字典类型并返回 sex_data = &#123;&#x27;男&#x27;: boy_str, &#x27;女&#x27;: girl_str &#125; # 提交，不然无法保存新建或者修改的数据 conn.commit() # 关闭游标 cursor.close() # 关闭连接 conn.close() return sex_data # 概率数据存入数据库def save_mysql(word_data, sex): # 连接数据库 conn = pymysql.connect(host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, db=&#x27;person_name&#x27;, charset=&#x27;utf8&#x27;) cursor = conn.cursor() if sex == &#x27;男&#x27;: # 循环存入数据 sql = &quot;INSERT INTO boy (word,probability) VALUES (%s,%s)&quot; for i in word_data: cursor.execute(sql, (i, word_data[i])) else: # 循环存入数据 sql = &quot;INSERT INTO girl (word,probability) VALUES (%s,%s)&quot; for i in word_data: cursor.execute(sql, (i, word_data[i])) # 提交，不然无法保存新建或者修改的数据 conn.commit() # 关闭游标 cursor.close() # 关闭连接 conn.close() if __name__ == &#x27;__main__&#x27;: # 获取训练数据集 name_data = input_name() # 统计男孩名字名字出现字的概率 boy_probability = probability(name_data[&#x27;男&#x27;]) girl_probability = probability(name_data[&#x27;女&#x27;]) # 存入数据库 save_mysql(boy_probability, &#x27;男&#x27;) save_mysql(girl_probability, &#x27;女&#x27;) 应用部分完整代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import pymysql # 读取数据库def accept_mysql(): # 连接数据库 conn = pymysql.connect(host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, db=&#x27;person_name&#x27;, charset=&#x27;utf8&#x27;) # 读取男孩数据 boy_cursor = conn.cursor() boy_cursor.execute(&quot;SELECT * FROM boy&quot;) boy_data = boy_cursor.fetchall() # 读取女孩数据 girl_cursor = conn.cursor() girl_cursor.execute(&quot;SELECT * FROM girl&quot;) girl_data = girl_cursor.fetchall() result = &#123; &#x27;男&#x27;: boy_data, &#x27;女&#x27;: girl_data &#125; return result # 分析读取名字def read_name(words, mysql_data_boy, mysql_data_girl): boy_word_probability = 0 girl_word_probability = 0 for x in words: # 男孩 for i in range(len(mysql_data_boy)): if x == mysql_data_boy[i][1]: # 如果名字是两个字以上，概率相加 boy_word_probability = boy_word_probability + mysql_data_boy[i][2] # 女孩 for i in range(len(mysql_data_girl)): if x == mysql_data_girl[i][1]: # 如果名字是两个字以上，概率相加 girl_word_probability = girl_word_probability + mysql_data_girl[i][2] result = &#123; &#x27;男&#x27;: boy_word_probability, &#x27;女&#x27;: girl_word_probability &#125; return result if __name__ == &#x27;__main__&#x27;: raw_name = input() name = raw_name[1:] # 获取数据库数据 mysql_data_boy = accept_mysql()[&#x27;男&#x27;] mysql_data_girl = accept_mysql()[&#x27;女&#x27;] # 分析名字 boy_probability = read_name(name, mysql_data_boy, mysql_data_girl)[&#x27;男&#x27;] girl_probability = read_name(name, mysql_data_boy, mysql_data_girl)[&#x27;女&#x27;] if boy_probability &gt; girl_probability: print(&#x27;男孩子&#x27;) if girl_probability &gt; boy_probability: print(&quot;女孩子&quot;) if girl_probability == boy_probability: print(&quot;不可能！&quot;) DEMO 项目DEMO地址：http://boy-girl.netlab.sunan.me 爬虫太多，服务已关闭2020.03.21","tags":["贝叶斯"],"categories":["机器学习"]},{"title":"双站点二级目录配置wordpress伪静态","path":"/2019-0124-双站点二级目录配置wordpress伪静态/","content":"经过考虑我决定把我的文艺方面的记录和技术方面是分开，于是我创建了两个目录，装两个wordpress。经过折腾终于分开了。但是我发现，所有的网站内页的文章都是404了。 刚开始我以为是数据库的问题，但是我查遍了整个数据库也没发现问题。最后我想到是不是伪静态的问题，当我把固定链接改为朴素模式的时候，果然好了，于是确定了是伪静态的问题。 但是现在问题来了，一个nginx的配置文件怎么配置两套伪静态规则呢？ 源码： 12345678910111213141516171819202122location /memory &#123; if (-f $request_filename/index.html)&#123; rewrite (.*) $1/index.html break; &#125; if (-f $request_filename/index.php)&#123; rewrite (.*) $1/index.php; &#125; if (!-f $request_filename)&#123; rewrite (.*) /memory/index.php; &#125; &#125; location /it &#123; if (-f $request_filename/index.html)&#123; rewrite (.*) $1/index.html break; &#125; if (-f $request_filename/index.php)&#123; rewrite (.*) $1/index.php; &#125; if (!-f $request_filename)&#123; rewrite (.*) /it/index.php; &#125; &#125; 注意有两处要修改的地方！","tags":["伪静态","nginx"],"categories":["php"]},{"title":"利用反向代理让微信小程序获取豆瓣API","path":"/2019-0123-利用反向代理让微信小程序获取豆瓣API/","content":"豆瓣的API成为很多微信小程序开发者的第一个项目，可能正因为这个原因使豆瓣禁止微信小程序获取它的API. 豆瓣会通过检测头文件的referer来判断是否是小程序发来的请求，而小程序则会在每个请求的referer打下自己烙印。所以这造成了微信小程序不能获取豆瓣API。 我做了个nginx反向代理修改referer，分享给大家。 https://api.sunan.me假如你要访问豆瓣的最新热映API https://api.douban.com/v2/movie/in_theaters你可以访问 https://api.sunan.me/v2/movie/in_theaters","tags":["微信小程序","反向代理"],"categories":["tools"]},{"title":"about","path":"/about/index.html","content":"Do great things"}]